#!/bin/bash

<%-
  session_dir = session.staged_root
  r_version = context.version.blank? ? "r36" : context.version.split(':')[0]
  rstudio_version = context.version.blank? ? "1.2" : context.version.split(':')[1]
  rstudio_variant = context.variant.blank? ? "basic" : context.variant.strip
  # set the user library path (based on version) to match with the module-provided R
  r_libs_user = {
    "r36" => "~/R/x86_64-rocker-linux-gnu-library/3.6",
    "r40" => "~/R/x86_64-rocker-linux-gnu-library/4.0",
    "r41" => "~/R/x86_64-rocker-linux-gnu-library/4.1",
    "r42" => "~/R/x86_64-rocker-linux-gnu-library/4.2",
  }
%>

# Load the required environment
setup_env () {
  # The rserver container module should set these environment variables:

  #   SINGULARITY_BINDPATH="/etc,/media,/mnt,/opt,/run,/srv,/usr,/var,/users"
  #   RSTUDIO_SERVER_IMAGE="/usr/local/project/ondemand/singularity/rstudio/rstudio_launcher_centos7.simg"
  #   PATH="$PATH:/path/to/R:/path/to/rstudio/rserver"
 
  # SINGULARITY_BINDPATH is being used to bind all RStudio's requirements from
  # the host into the guest, and so those values may vary between sites.
  export COMMON=${HOME/#\/home/\/common}
  . /util/opt/lmod/lmod/init/profile
  export -f module
  module use /util/opt/hcc-modules/Common
  module purge
  module load singularity
  mkdir /tmp/rstudio-run /tmp/rstudio-lib
  export RSTUDIO_SERVER_IMAGE="/work/HCC/SINGULARITY/IMAGES/rstudio-<%= rstudio_variant %>-<%= rstudio_version %>-<%= r_version %>.sif"
  export SINGULARITYENV_USER=$USER
  export SINGULARITY_BINDPATH="/sys/fs/cgroup,/media,/mnt,/opt,/srv,/home,/work,/common,/util,/tmp/rstudio-run:/var/run,/tmp/rstudio-lib:/var/lib/rstudio-server"
  export PATH=/usr/lib/rstudio-server/bin:$PATH
  export WORKING_DIR="<%= session_dir %>"
  export R_LIBS_USER="<%= r_libs_user[r_version] %>"
  
}
setup_env

#
# Start RStudio Server
#
# PAM auth helper used by RStudio
export RSTUDIO_AUTH="$WORKING_DIR/bin/auth"

# Generate an `rsession` wrapper script
export RSESSION_WRAPPER_FILE="$WORKING_DIR/rsession.sh"
(
umask 077
sed 's/^ \{2\}//' > "$WORKING_DIR/rsession.sh" << EOL
  #!/usr/bin/env bash

  # Log all output from this script
  export RSESSION_LOG_FILE="$WORKING_DIR/rsession.log"

  exec &>>"\${RSESSION_LOG_FILE}"

  # rsession.sh doesn't share the same env as the outside script, so these
  # need to be set explicitly
  export TZ="US/Central"
  export HOME=${HOME}
  export WORK=${WORK}
  export COMMON=${COMMON}
  export MODULEPATH_ROOT="$MODULEPATH_ROOT"
  export MODULEPATH="$MODULEPATH"
  export LMOD_PKG="$LMOD_PKG"
  export R_LIBS_USER="${R_LIBS_USER}"
  export RS_LOG_LEVEL=info
  export RS_LOG_TYPE=stderr

  # Launch the original command
  echo "Launching rsession..."
  set -x
  exec rsession --r-libs-user ${R_LIBS_USER} "\${@}"
EOL
)
chmod 700 "$WORKING_DIR/rsession.sh"

# Set working directory to work directory
cd "${WORK}"

# Output debug info
module list
hostname

set -x
# Launch the RStudio Server
echo "Starting up rserver..."

singularity exec -B $WORKING_DIR "$RSTUDIO_SERVER_IMAGE" rserver \
 --www-port="${port}" \
 --auth-none=0 \
 --auth-pam-helper-path="${RSTUDIO_AUTH}" \
 --auth-encrypt-password=0 \
 --rsession-path="${RSESSION_WRAPPER_FILE}" \
 --server-app-armor-enabled=0 \
 --secure-cookie-key-file="${TMPDIR}/rstudio-server/secure-cookie-key" \
 --server-user=${USER}
